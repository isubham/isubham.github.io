object is the key construct and all interactions happen using them, the classic class based OO used classes and objects as the building blocks of the program. 

Letâ€™s build a note taking app. 

Object oriented way
we would create paper, notebook, pencil. paper would have size, color, thickness. and its behavior might include changing its different attributes like color, similarly every element will have state and some behaviors to each of them,  this coupling is called encapsulation.

Paper would also interact with pencil to help draw, it will also interact with eraser to erase. so paper is getting touched with pencil and eraser but they are having different outcome. In a way pencil and eraser belong to same set of elements i.e. they can impact surface of paper.

So paper is behaving differently to same touch - some might draw and some might erase, This is called polymorphism.

Pencil and eraser, they can belong to same parent called Writer and it would be called inheritance.

One other way might be to have this attribute to effect paper be one of its behaviour and not the whole identity, which would give it flexibility to have more behaviours and that way pencil can also interact with other elements and not just paper, it might be other surfaces or other pencils.

paper

  touch(writeable writer)
    writer.write()


writer

  write()



there are of course more ways to think about it and it can be. Few other paradigms include - imperative programming, procedural programming, logic programming. 
so imperative programming 

References

- https://www.freecodecamp.org/news/an-introduction-to-programming-paradigms/
